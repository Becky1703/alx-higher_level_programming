"""Test cases for matrix multiply"""

>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
>>> print(lazy_matrix_mul([[3, 4], [5, 6]], [[3, 4], [5, 6]]))
[[29 36]
 [45 56]]

>>> print(lazy_matrix_mul([[1, 2 ]], [[5, 6], [3, 4]]))
[[11 14]]

>>> print(lazy_matrix_mul("good", [4]))
Traceback (most recent call last):
...
ValueError: Scalar operands are not allowed, use '*' instead

>>> print(lazy_matrix_mul([4], "cool"))
Traceback (most recent call last):
...
ValueError: Scalar operands are not allowed, use '*' instead

>>> print(lazy_matrix_mul([1, 2], [[1, 2], [3, 4]]))
[ 7 10]

>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [1, 2]))
[ 5 11]

>>> print(lazy_matrix_mul([], [[1]]))
Traceback (most recent call last):
...
ValueError: shapes (0,) and (1,1) not aligned: 0 (dim 0) != 1 (dim 0)

>>> print(lazy_matrix_mul([[0]], []))
Traceback (most recent call last):
...
ValueError: shapes (1,1) and (0,) not aligned: 1 (dim 1) != 0 (dim 0)

>>> print(lazy_matrix_mul([[1,"a"], [3, 4]], [[1, 2], [3, 4]]))
Traceback (most recent call last):
...
TypeError: invalid data type for einsum

>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, "a"]]))
Traceback (most recent call last):
...
TypeError: invalid data type for einsum

>>> print(lazy_matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]]))
Traceback (most recent call last):
...
ValueError: setting an array element with a sequence.

>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [2, 3, 4]]))
Traceback (most recent call last):
...
ValueError: setting an array element with a sequence.

>>> print(lazy_matrix_mul([[1, 2], [3, 4], [5, 6]], [[1, 2, 3, 4], [2, 3, 4, 5], [1,2,3,4]]))
Traceback (most recent call last):
...
ValueError: shapes (3,2) and (3,4) not aligned: 2 (dim 1) != 3 (dim 0)
